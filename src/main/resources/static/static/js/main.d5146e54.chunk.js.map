{"version":3,"sources":["Component/Navbar/Navbar.jsx","Component/EntityTemplate/EntityTemplate.jsx","utils.js","Routes/WardTable/WardTable.jsx","Routes/WardCreate/WardCreate.jsx","Routes/WardEdit/WardEdit.jsx","Routes/DiagnosTable/DiagnosTable.jsx","Routes/DiagnosCreate/DiagnosCreate.jsx","Routes/DiagnosEdit/DiagnosEdit.jsx","Routes/PeopleTable/PeopleTable.jsx","Routes/PeopleCreate/PeopleCreate.jsx","Routes/PeopleEdit/PeopleEdit.jsx","Routes/AuthorizePage/AuthorizePage.jsx","Routes/RegistrationPage/RegistrationPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","user","this","props","className","role","aria-label","id","to","href","Component","EntityTemplate","children","createIsActive","name","toLowerCase","doQuery","url","opts","a","fetch","WardTable","state","wardList","Array","handleDelete","bind","then","response","json","setState","from","method","filter","ward","map","key","max_count","onClick","WardCreate","handleName","handleCount","handleSubmit","elem","target","value","headers","body","JSON","stringify","onSubmit","type","placeholder","required","onChange","min","WardEdit","mounted","DiagnosTable","diagnosList","diagnos","DiagnosCreate","DiagnosEdit","PeopleTable","peopleList","person","firstname","lastname","pathername","PeopleCreate","diagnosID","wardID","handleFirstname","handleLastname","handlePathername","handleDiagnos","handleWard","array","length","find","PeopleEdit","AuthorizePage","RegistrationPage","username","password","handleUsername","handlePassword","roles","App","catch","path","render","match","params","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.d5146e54.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport {\n    Link\n} from \"react-router-dom\";\n\n\nclass Navbar extends Component {\n    render() {\n\n        const {user} = this.props;\n\n        return (\n            <Fragment>\n                <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                    <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n                        {user !== null ? (\n                            <Fragment>\n                                <div className=\"navbar-start\">\n                                    <Link className=\"navbar-item\" to=\"/ward\">\n                                        Палаты\n                                    </Link>\n\n                                    <Link className=\"navbar-item\" to=\"/diagnos\">\n                                        Диагнозы\n                                    </Link>\n\n                                    <Link className=\"navbar-item\" to=\"/people\">\n                                        Люди\n                                    </Link>\n                                </div>\n\n                                <div className=\"navbar-end\">\n                                    <div className=\"navbar-item\">\n                                        <div className=\"buttons\">\n                                            <a className=\"button is-light\" href={\"/logout\"}>\n                                                Выход\n                                            </a>\n                                        </div>\n                                    </div>\n                                </div>\n                            </Fragment>\n                        ) : (\n                            <div/>\n                        )}\n                    </div>\n                </nav>\n            </Fragment>);\n    }\n}\n\nexport default Navbar;","import React, {Component, Fragment} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nclass EntityTemplate extends Component {\n\n    render() {\n        const {children, createIsActive, name} = this.props;\n\n        return (\n            <Fragment>\n                <div className=\"tile is-parent is-vertical\">\n                    <article className=\"tile is-child notification is-primary\">\n                        <p className=\"title\">{name}</p>\n                        {createIsActive &&\n                        <p className=\"subtitle\"><Link to={name.toLowerCase() + \"_create\"}>Create</Link></p>}\n                        <div className=\"content\">\n                            {children}\n                        </div>\n                    </article>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default EntityTemplate;","\"use strict\"\n\nconst DOMAIN = '' //http://localhost:8080\n\nexport async function doQuery(url, opts) {\n    return await fetch(DOMAIN + url, opts);\n}","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {doQuery} from \"../../utils\";\n\nclass WardTable extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    state = {\n        wardList: Array()\n    }\n\n    componentDidMount() {\n        doQuery('/api/ward')\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    wardList: Array.from(json)\n                })\n            })\n    }\n\n    handleDelete(id) {\n        doQuery(`/api/ward/${id}`, {\n            method: \"DELETE\"\n        }).then(() => {\n            const {wardList} = this.state;\n            this.setState({\n                wardList: wardList.filter(ward => ward.id !== id)\n            })\n        });\n    }\n\n    render() {\n        const {wardList} = this.state;\n\n        return (\n            <table className=\"table\">\n                <thead>\n                <tr>\n                    <th>Название</th>\n                    <th>Вместимость палаты</th>\n                </tr>\n                </thead>\n                <tbody>\n                {wardList.map(ward => (\n                    <tr key={ward.id}>\n                        <th>{ward.name}</th>\n                        <th>{ward.max_count}</th>\n                        <th><Link to={`/ward/${ward.id}`}>Изменить</Link></th>\n                        <th><a onClick={() => this.handleDelete(ward.id)}>Удалить</a></th>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default WardTable;","import React, {Component} from \"react\";\nimport {doQuery} from \"../../utils\";\n\nclass WardCreate extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleName = this.handleName.bind(this);\n        this.handleCount = this.handleCount.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        name: '',\n        max_count: ''\n    }\n\n    handleName(elem) {\n        this.setState({\n            name: elem.target.value\n        })\n    }\n\n    handleCount(elem) {\n        this.setState({\n            max_count: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {name, max_count} = this.state;\n\n        const json = JSON.stringify({\n            name: name,\n            max_count: max_count\n        });\n\n        doQuery(\"/api/ward\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label text-white\">Название палаты</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder=\"Введите незвание\"\n                               required={true}\n                               onChange={this.handleName}/>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Вместимость</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"number\"\n                               min={0}\n                               placeholder=\"Введите вместимость\"\n                               required={true}\n                               onChange={this.handleCount}/>\n                    </div>\n                </div>\n\n                <div className=\"control\">\n                    <button type=\"submit\" className=\"button \">Создать</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default WardCreate;","import React, {Component} from \"react\";\nimport {doQuery} from \"../../utils\";\n\nclass WardEdit extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleName = this.handleName.bind(this);\n        this.handleCount = this.handleCount.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        name: '',\n        max_count: '',\n        ward: null,\n        mounted: false\n    }\n\n    componentDidMount() {\n        const {id} = this.props;\n\n        doQuery(`/api/ward/${id}`)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    ward: json,\n                    mounted: true\n                })\n            });\n    }\n\n    handleName(elem) {\n        this.setState({\n            name: elem.target.value\n        })\n    }\n\n    handleCount(elem) {\n        this.setState({\n            max_count: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {name, max_count} = this.state;\n        const {id} = this.props;\n\n        const json = JSON.stringify({\n            name: name,\n            max_count: max_count\n        });\n\n        doQuery(`/api/ward/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n\n    }\n\n    render() {\n        const {mounted, ward} = this.state;\n\n        return mounted && (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label text-white\">Название палаты</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder={ward.name}\n                               required={true}\n                               onChange={this.handleName}/>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Вместимость</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"number\"\n                               min={0}\n                               placeholder={ward.max_count}\n                               required={true}\n                               onChange={this.handleCount}/>\n                    </div>\n                </div>\n\n                <div className=\"control\">\n                    <button type=\"submit\" className=\"button \">Изменить</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default WardEdit;","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {doQuery} from \"../../utils\";\n\nclass DiagnosTable extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    state = {\n        diagnosList: Array()\n    }\n\n    componentDidMount() {\n        doQuery('/api/diagnos')\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    diagnosList: Array.from(json)\n                })\n            })\n    }\n\n    handleDelete(id) {\n        doQuery(`/api/diagnos/${id}`, {\n            method: \"DELETE\"\n        }).then(() => {\n            const {diagnosList} = this.state;\n            this.setState({\n                diagnosList: diagnosList.filter(diagnos => diagnos.id !== id)\n            })\n        });\n    }\n\n    render() {\n        const {diagnosList} = this.state;\n\n        return (\n            <table className=\"table\">\n                <thead>\n                <tr>\n                    <th>Название</th>\n                </tr>\n                </thead>\n                <tbody>\n                {diagnosList.map(diagnos => (\n                    <tr key={diagnos.id}>\n                        <th>{diagnos.name}</th>\n                        <th><Link to={`/diagnos/${diagnos.id}`}>Изменить</Link></th>\n                        <th><a onClick={() => this.handleDelete(diagnos.id)}>Удалить</a></th>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default DiagnosTable;","import React, {Component} from \"react\";\nimport {doQuery} from \"../../utils\";\n\nclass DiagnosCreate extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleName = this.handleName.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        name: '',\n    }\n\n    handleName(elem) {\n        this.setState({\n            name: elem.target.value\n        })\n    }\n\n\n    handleSubmit() {\n        const {name} = this.state;\n\n        const json = JSON.stringify({\n            name: name\n        });\n\n        doQuery(\"/api/diagnos\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label text-white\">Диагноз</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder=\"Введите незвание\"\n                               required={true}\n                               onChange={this.handleName}/>\n                    </div>\n                </div>\n\n                <div className=\"control\">\n                    <button type=\"submit\" className=\"button \">Создать</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default DiagnosCreate;","import React, {Component} from \"react\";\nimport {doQuery} from \"../../utils\";\n\nclass DiagnosEdit extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleName = this.handleName.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        name: '',\n        max_count: '',\n        diagnos: null,\n        mounted: false\n    }\n\n    componentDidMount() {\n        const {id} = this.props;\n\n        doQuery(`/api/diagnos/${id}`)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    diagnos: json,\n                    mounted: true\n                })\n            });\n    }\n\n    handleName(elem) {\n        this.setState({\n            name: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {name} = this.state;\n        const {id} = this.props;\n\n        const json = JSON.stringify({\n            name: name\n        });\n\n        doQuery(`/api/diagnos/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n\n    }\n\n    render() {\n        const {mounted, diagnos} = this.state;\n\n        return mounted && (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label text-white\">Диагноз</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder={diagnos.name}\n                               required={true}\n                               onChange={this.handleName}/>\n                    </div>\n                </div>\n\n                <div className=\"control\">\n                    <button type=\"submit\" className=\"button \">Изменить</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default DiagnosEdit;","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {doQuery} from \"../../utils\";\n\nclass PeopleTable extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n\n    state = {\n        peopleList: Array()\n    }\n\n    componentDidMount() {\n        doQuery('/api/person')\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    peopleList: Array.from(json)\n                });\n            });\n    }\n\n    handleDelete(id) {\n        doQuery(`/api/person/${id}`, {\n            method: \"DELETE\"\n        }).then(() => {\n            const {peopleList} = this.state;\n            this.setState({\n                peopleList: peopleList.filter(person => person.id !== id)\n            });\n        });\n    }\n\n    render() {\n        const {peopleList} = this.state;\n\n        return (\n            <table className=\"table\">\n                <thead>\n                <tr>\n                    <th>Имя</th>\n                    <th>Фамилия</th>\n                    <th>Отчество</th>\n                    <th>Диагноз</th>\n                    <th>Палата</th>\n                </tr>\n                </thead>\n                <tbody>\n                {peopleList.map(person => (\n                    <tr key={person.id}>\n                        <th>{person.firstname}</th>\n                        <th>{person.lastname}</th>\n                        <th>{person.pathername}</th>\n                        <th>{person.diagnos.name}</th>\n                        <th>{person.ward.name}</th>\n                        <th><Link to={`/person/${person.id}`}>Изменить</Link></th>\n                        <th><a onClick={() => this.handleDelete(person.id)}>Удалить</a></th>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default PeopleTable;","import React, {Component} from \"react\";\nimport {doQuery} from \"../../utils\";\n\nclass PeopleCreate extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleFirstname = this.handleFirstname.bind(this);\n        this.handleLastname = this.handleLastname.bind(this);\n        this.handlePathername = this.handlePathername.bind(this);\n        this.handleDiagnos = this.handleDiagnos.bind(this);\n        this.handleWard = this.handleWard.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        firstname: '',\n        lastname: '',\n        pathername: '',\n        diagnosID: '',\n        wardID: '',\n        diagnosList: Array(),\n        wardList: Array()\n    }\n\n    componentDidMount() {\n        doQuery(\"/api/diagnos\")\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    diagnosList: array,\n                    diagnosID: array.length === 0 ? this.state.diagnosID : array[0].id\n                });\n            });\n\n        doQuery(\"/api/ward\")\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    wardList: array,\n                    wardID: array.length === 0 ? this.state.wardID : array[0].id\n                });\n            });\n    }\n\n    handleFirstname(elem) {\n        this.setState({\n            firstname: elem.target.value\n        });\n    }\n\n    handleLastname(elem) {\n        this.setState({\n            lastname: elem.target.value\n        })\n    }\n\n    handlePathername(elem) {\n        this.setState({\n            pathername: elem.target.value\n        })\n    }\n\n    handleDiagnos(elem) {\n        this.setState({\n            diagnosID: elem.target.value\n        })\n    }\n\n    handleWard(elem) {\n        this.setState({\n            wardID: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {firstname, lastname, pathername, diagnosList, wardList, diagnosID, wardID} = this.state;\n\n        const json = JSON.stringify({\n            firstname: firstname,\n            lastname: lastname,\n            pathername: pathername,\n            diagnos: diagnosList.find(diagnos => diagnos.id == diagnosID),\n            ward: wardList.find(ward => ward.id == wardID),\n        });\n\n        doQuery(\"/api/person\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n\n    }\n\n    render() {\n        const {diagnosList, wardList} = this.state\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label text-white\">Имя</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder=\"Введите имя\"\n                               required={true}\n                               onChange={this.handleFirstname}/>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Фамилия</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder=\"Введите фамилию\"\n                               required={true}\n                               onChange={this.handleLastname}/>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Отчество</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder=\"Введите отчество\"\n                               required={true}\n                               onChange={this.handlePathername}/>\n                    </div>\n                </div>\n\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Диагноз</label>\n                    <div className=\"select\">\n                        <select required={true} onChange={this.handleDiagnos}>\n                            {diagnosList.map(diagnos => (\n                                <option key={diagnos.id} value={diagnos.id}>{diagnos.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Диагноз</label>\n                    <div className=\"select\">\n                        <select required={true} onChange={this.handleWard}>\n                            {wardList.map(ward => (\n                                <option key={ward.id} value={ward.id}>{ward.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"control\">\n                    <button type=\"submit\" className=\"button \">Создать</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default PeopleCreate;","import React, {Component} from \"react\";\nimport {doQuery} from \"../../utils\";\n\nclass PeopleEdit extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.handleFirstname = this.handleFirstname.bind(this);\n        this.handleLastname = this.handleLastname.bind(this);\n        this.handlePathername = this.handlePathername.bind(this);\n        this.handleDiagnos = this.handleDiagnos.bind(this);\n        this.handleWard = this.handleWard.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        person: '',\n        firstname: '',\n        lastname: '',\n        pathername: '',\n        diagnosID: '',\n        wardID: '',\n        diagnosList: Array(),\n        wardList: Array(),\n        mounted: false\n    }\n\n    componentDidMount() {\n        const {id} = this.props;\n\n        doQuery(\"/api/diagnos\")\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    diagnosList: array,\n                });\n            });\n\n        doQuery(\"/api/ward\")\n            .then(response => response.json())\n            .then(json => {\n                const array = Array.from(json);\n                this.setState({\n                    wardList: array,\n                });\n            });\n\n\n        doQuery(`/api/person/${id}`)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    person: json,\n                    wardID: json.ward.id,\n                    diagnosID: json.diagnos.id,\n                    mounted: true,\n                })\n            });\n    }\n\n    handleFirstname(elem) {\n        this.setState({\n            firstname: elem.target.value\n        });\n    }\n\n    handleLastname(elem) {\n        this.setState({\n            lastname: elem.target.value\n        })\n    }\n\n    handlePathername(elem) {\n        this.setState({\n            pathername: elem.target.value\n        })\n    }\n\n    handleDiagnos(elem) {\n        this.setState({\n            diagnosID: elem.target.value\n        })\n    }\n\n    handleWard(elem) {\n        this.setState({\n            wardID: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {firstname, lastname, pathername, diagnosList, wardList, diagnosID, wardID} = this.state;\n        const {id} = this.props;\n\n        const json = JSON.stringify({\n            firstname: firstname,\n            lastname: lastname,\n            pathername: pathername,\n            diagnos: diagnosList.find(diagnos => diagnos.id == diagnosID),\n            ward: wardList.find(ward => ward.id == wardID),\n        });\n\n        doQuery(`/api/person/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n    }\n\n    render() {\n        const {diagnosList, wardList, mounted, person} = this.state\n\n        return mounted && (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"field\">\n                    <label className=\"label text-white\">Имя</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder={person.firstname}\n                               required={true}\n                               onChange={this.handleFirstname}/>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Фамилия</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder={person.lastname}\n                               required={true}\n                               onChange={this.handleLastname}/>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Отчество</label>\n                    <div className=\"control\">\n                        <input className=\"input\"\n                               type=\"text\"\n                               placeholder={person.pathername}\n                               required={true}\n                               onChange={this.handlePathername}/>\n                    </div>\n                </div>\n\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Диагноз</label>\n                    <div className=\"select\">\n                        <select required={true} onChange={this.handleDiagnos}>\n                            {diagnosList.map(diagnos => (\n                                <option key={diagnos.id} value={diagnos.id}>{diagnos.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"field\">\n                    <label className=\"label text-white\">Диагноз</label>\n                    <div className=\"select\">\n                        <select required={true} onChange={this.handleWard}>\n                            {wardList.map(ward => (\n                                <option key={ward.id} value={ward.id}>{ward.name}</option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"control\">\n                    <button type=\"submit\" className=\"button \">Изменить</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default PeopleEdit;","import {Link} from \"react-router-dom\";\nimport React, {Component} from \"react\";\n\nclass AuthorizePage extends Component {\n    render() {\n        return (\n\n            <section className=\"section grid\">\n                <div>Дла работы в приложении необходимо авторизоваться</div>\n                <div className=\"container\">\n                    <div className=\"columns is-centered\">\n                        <div className=\"buttons\">\n                            <Link className=\"button is-primary\" to=\"/registration\">\n                                <strong>Зарегистрироваться</strong>\n                            </Link>\n\n                            <a className=\"button is-light\" href={\"/login\"}>\n                                Войти\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n\n\nexport default AuthorizePage;","import React, {Component} from \"react\";\nimport {doQuery} from \"../../utils\";\n\nclass RegistrationPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleUsername = this.handleUsername.bind(this);\n        this.handlePassword = this.handlePassword.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    state = {\n        username: '',\n        password: ''\n    }\n\n    handleUsername(elem) {\n        this.setState({\n            username: elem.target.value\n        })\n    }\n\n    handlePassword(elem) {\n        this.setState({\n            password: elem.target.value\n        })\n    }\n\n    handleSubmit() {\n        const {username, password} = this.state;\n\n        const json = JSON.stringify({\n            username: username,\n            password: password,\n            roles: [\"USER\"]\n        });\n\n        doQuery(\"/user\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: json\n        });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"title\">\n                    Регистрация\n                </div>\n                <div className=\"field\">\n                    <p className=\"control has-icons-left has-icons-right\">\n                        <input className=\"input\" type=\"text\" placeholder=\"Username\" required={true}\n                               onChange={this.handleUsername}/>\n                        <span className=\"icon is-small is-left\">\n                    <i className=\"fas fa-envelope\"></i>\n                        </span>\n                        <span className=\"icon is-small is-right\">\n                 <i className=\"fas fa-check\"></i>\n            </span>\n                    </p>\n                </div>\n                <div className=\"field\">\n                    <p className=\"control has-icons-left\">\n                        <input className=\"input\" type=\"password\" placeholder=\"Password\" required={true}\n                               onChange={this.handlePassword}/>\n                        <span className=\"icon is-small is-left\">\n      <i className=\"fas fa-lock\"></i>\n    </span>\n                    </p>\n                </div>\n\n                <div className=\"control\">\n                    <button type=\"submit\" className=\"button \">Регистрация</button>\n                </div>\n            </form>\n        );\n    }\n}\n\n\nexport default RegistrationPage;","import React, {Component} from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Navbar from \"./Component/Navbar/Navbar\";\nimport EntityTemplate from \"./Component/EntityTemplate/EntityTemplate\";\nimport WardTable from \"./Routes/WardTable/WardTable\";\nimport WardCreate from \"./Routes/WardCreate/WardCreate\";\nimport WardEdit from \"./Routes/WardEdit/WardEdit\";\nimport DiagnosTable from \"./Routes/DiagnosTable/DiagnosTable\";\nimport DiagnosCreate from \"./Routes/DiagnosCreate/DiagnosCreate\";\nimport DiagnosEdit from \"./Routes/DiagnosEdit/DiagnosEdit\";\nimport PeopleTable from \"./Routes/PeopleTable/PeopleTable\";\nimport PeopleCreate from \"./Routes/PeopleCreate/PeopleCreate\";\nimport PeopleEdit from \"./Routes/PeopleEdit/PeopleEdit\";\nimport {doQuery} from \"./utils\";\nimport AuthorizePage from \"./Routes/AuthorizePage/AuthorizePage\";\nimport RegistrationPage from \"./Routes/RegistrationPage/RegistrationPage\";\n\nclass App extends Component {\n    state = {\n        user: null\n    };\n\n    componentDidMount() {\n        doQuery(\"/user\",)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    user: json\n                });\n            })\n            .catch(() => {\n                this.setState({\n                    user: null\n                });\n            });\n    }\n\n    render() {\n        const {user} = this.state;\n\n        return (\n            <div className=\"App\">\n                <Router>\n                    <header className=\"App-header\">\n                        <Navbar user={user}/>\n                    </header>\n                    <main>\n                        {user !== null ? (\n                            <Switch>\n                                <Route path=\"/ward_create\">\n                                    <EntityTemplate name={\"Ward\"} createIsActive={false} children={<WardCreate/>}/>\n                                </Route>\n\n                                <Route path=\"/ward/:id\" render={({match}) => (\n                                    <EntityTemplate name={\"Ward\"} createIsActive={false}\n                                                    children={<WardEdit id={match.params.id}/>}/>\n                                )}/>\n\n                                <Route path=\"/ward\">\n                                    <EntityTemplate name={\"Ward\"} createIsActive={true} children={<WardTable/>}/>\n                                </Route>\n\n                                <Route path=\"/diagnos_create\">\n                                    <EntityTemplate name={\"Diagnos\"} createIsActive={false}\n                                                    children={<DiagnosCreate/>}/>\n                                </Route>\n\n                                <Route path=\"/diagnos/:id\" render={({match}) => (\n                                    <EntityTemplate name={\"Diagnos\"} createIsActive={false}\n                                                    children={<DiagnosEdit id={match.params.id}/>}/>\n                                )}/>\n\n                                <Route path=\"/diagnos\">\n                                    <EntityTemplate name={\"Diagnos\"} createIsActive={true} children={<DiagnosTable/>}/>\n                                </Route>\n\n                                <Route path=\"/person_create\">\n                                    <EntityTemplate name={\"Person\"} createIsActive={false} children={<PeopleCreate/>}/>\n                                </Route>\n\n                                <Route path=\"/person/:id\" render={({match}) => (\n                                    <EntityTemplate name={\"Diagnos\"} createIsActive={false}\n                                                    children={<PeopleEdit id={match.params.id}/>}/>\n                                )}/>\n\n                                <Route path=\"/people\">\n                                    <EntityTemplate name={\"Person\"} createIsActive={true} children={<PeopleTable/>}/>\n                                </Route>\n\n\n                            </Switch>\n                        ) : (\n                            <Switch>\n                                <Route path=\"/registration\">\n                                    <RegistrationPage/>\n                                </Route>\n\n                                <Route path=\"/\">\n                                    <AuthorizePage/>\n                                </Route>\n                            </Switch>\n                        )}\n                    </main>\n                </Router>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}